Question
    You are climbing a staircase. It takes n steps to reach the top.

    Each time you can either climb 1 or 2 steps. In how many
    distinct ways can you climb to the top?

    Constraints:
        - 1 <= n <= 45

Thoughts Before Coding
    - In the array bottom up approach
        - In each of the iteration
            - We are only relying values from indices 'i - 1' and 'i - 2'
            - This means we can use 2 variables to keep track of these
              values instead of an array
                - In each of the iteration
                    - We will be updating these 2 variables

Answer
    - Lets validate the input parameter
        - If 'n' is equal to 0 OR 'n' is equal to 1
            - Return 1
    - Create two variables
        - ways1, the number of ways if we take 1 step, initially 1
        - ways2, the number of ways if we take 2 steps, initially 1
    - Iterate through the indices from 2 -> n, denoted as 'i'
        - Find the total number of 'ways' at the current step
            - ways = ways1 + ways2
        - Update 'ways2' to 'ways1'
        - Update 'ways1' to 'ways'
    - Return 'ways1'

What is the Time and Space Complexity?
    - Time Complexity = O(n), where n is the input value
        - O(n), visit each index once
    - Space Complexity = O(1)








