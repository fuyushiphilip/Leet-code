Question
    The count-and-say sequence is a sequence of digit strings defined by
    the recursive formula:
        - countAndSay(1) = "1"
        - countAndSay(n) is the way you would "say" the digit string
          from countAndSay(n-1), which is then converted into a different
          digit string.

    To determine how you "say" a digit string, split it into the minimal
    number of groups so that each group is a contiguous section all of
    the same character. Then for each group, say the number of characters,
    then say the character. To convert the saying into a digit string,
    replace the counts with a number and concatenate every saying.

Thoughts Before Coding
    - we will implement a recursive approach
        - For each of the number 'n'
            - We will first want to find the count and say (prev) for 'n - 1'
        - Then for each of the characters 'c' inside the 'prev'
            - We will want to keep track of the consecutive frequency of
              'c' inside 'prev'
            - Then if we are at the end of the string or the next character
              does not equal to 'c'
                - We will need to append 'count' and 'c' to our resulting
                  string for our current count and say for 'n'

Answer
    - Implement a recursive approach
        - What parameters do we need?
            - n, the current number we are processing
        - What is the base case?
            - If 'n' is equal to 1
                - Return "1"
        - In each of the recursive call
            - Recursively find the 'prev' string for 'n - 1'
                - n => n - 1
            - Create a StringBuilder 'cur' to keep track of the
              count and say for 'n'
            - Create a variable 'count' to keep track of the frequency
              of the current character
            - Iterate through the indices of 'prev', denoted as 'i'
                - Increment 'count'
                - If 'i' is at the last index OR the character at 'i + 1' does
                  not equal to the current character at 'i'
                    - Append 'count' to 'cur'
                    - Append the current character to 'cur'
                    - Reset 'count' to 0
            - Return a string representation of 'cur'

What is the Time and Space Complexity?
    - Time Complexity = O(n * k), where n is the input value and k is
      the average length of each string
        - O(n * k), there are up to 'n' recursive calls, and we iterate
          through 'k' indices each
    - Space Complexity = O(n) + O(k) = O(n + k), where n is the input value and k is
        the average length of each string
            - O(n), recursive call stack memory
            - O(k), the generated strings in each recursive call









