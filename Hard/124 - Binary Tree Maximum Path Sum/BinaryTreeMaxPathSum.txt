Question
    A path in a binary tree is a sequence of nodes where each pair of
    adjacent nodes in the sequence has an edge connecting them. A node
    can only appear in the sequence at most once. Note that the path does
    not need to pass through the root.

    The path sum of a path is the sum of the node's values in the path.

    Given the root of a binary tree, return the maximum path sum of any path.

    Constraints:
        - The number of nodes in the tree is in the range [1, 3 * 10^4].
        - -1000 <= Node.val <= 1000

Thoughts Before Coding
    - For each of the node 'x'
        - We will first want to find the maximum path sum of its 'left' and 'right' subtree
        - Then the maximum path sum we can find at 'x' is equal to
            - x.val + left + right
    - We should note that we do not want to include the maximum path sum on the left if 'left' is less
      than 0
        - This is because any negative value added to our current sum will only decrease the sum
        - The same rule will apply for the left subtree

Answer
    - Create a reference class 'MaxSum' to keep track of the maximum sum in the input tree
        - There will a single field 'value', which will initially be 'Integer.MIN_VALUE'
    - Implement the recursive approach
        - What parameters do we need?
            - node, the current node we are visiting
            - maxSum, reference object to keep track of the maximum path sum
        - What is the base case?
            - If 'node' is equal to null
                - Return 0
        - In each of the recursive call
            - Recursively find the maximum path sum of the 'left' subtree
                - node => node.left
                - Default 'left' to 0 if 'left' is less than 0
            - Recursively find the maximum path sum of the 'right' subtree
                - node => node.right
                - Default 'right' to 0 if 'right' is less than 0
            - Update 'maxSum.value' if 'node.val + left + right' is greater
            - Return 'max(node.val + left, node.val + right)'
    - Return 'maxSum.value'

What is the Time and Space Complexity?
    - Time Complexity = O(n), where 'n' is the number of nodes in the binary tree
        - O(n), visit each node once
    - Space Complexity = O(h), where 'h' is the height of the tree
        - O(h), recursive call stack memory













