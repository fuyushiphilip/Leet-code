Question
    Given an m x n integers matrix, return the length of the
    longest increasing path in matrix.

    From each cell, you can either move in four directions:
    left, right, up, or down. You may not move diagonally
    or move outside the boundary (i.e., wrap-around is not allowed).

Thoughts Before Coding
    - For each of the cell at 'r, c'
        - We have 4 possible directions (up, down, left, right)
        - We will want to pick the direction that will give the longest
          increasing path 'x'
        - Then we can increment 'x' by 1 to account for the current cell

Answer
    - Create a variable 'result' to keep track of the longest increasing path
    - Iterate through the rows and columns of 'matrix', denoted as 'r, c'
        - recursively find the longest increasing path 'maxPath' if we start from 'r, c'
            - What parameters do we need?
                - r, the current row
                - c, the current column
                - matrix, input matrix
            - In each of the recursive call
                - Create a variable 'maxPath', initially 0
                - Iterate through the 4 directions, denoted as 'd'
                    - Calculate the new cell 'nr, nc' when moving in the direction
                    - If 'nr, nc' is out of bound OR 'matrix[nr][nc]' is less than
                      or equal to 'matrix[r][c]'
                        - continue to next direction
                    - Recursively check the longest increasing path 'x'
                        - r => nr
                        - c => nc
                    - Update 'maxPath' if 'x' is greater
                - Return 'maxPath + 1'
        - Update 'result' if 'maxPath' is greater
    - Return 'result'
    - The recursive approach is not efficient enough due to overlapping recursive calls
        - We can avoid overlapping recursive calls using memoization

What is the Time and Space Complexity?
    - Time Complexity = O(n * 4^n), where 'n' is the total number of cells
        - O(n * 4^n), iterate through all starting cells
            - Each recursive call has up to 4 choices and a depth of 'n'
    - Space Complexity = O(n), where 'n' is the total number of cells
        - O(n), recursive call stack memory