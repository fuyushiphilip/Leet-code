Question
    The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon.
    The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the
    top-left room and must fight his way through dungeon to rescue the princess.

    The knight has an initial health point represented by a positive integer. If at any point his health point
    drops to 0 or below, he dies immediately.

    Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon
    entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's
    health (represented by positive integers).

    To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.

    Return the knight's minimum initial health so that he can rescue the princess.

    Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right
    room where the princess is imprisoned.

Thoughts Before Coding
    - The knight will initially start at cell (0, 0)
        - For each of the cell 'r, c'
            - We have two choices
                - We can either move rightward or downward
            - We will pick the choice that will give
              us the minimum amount of health
        - If we have a 'm x n' grid
            - If the knight step into the cell located at (m, n - 1)
                - The knight's health should be equal to 1
            - If the knight step into the cell located at (m - 1, n)
                - The knight's health should be equal to 1

Answer
    - Implement the recursive approach
        - What parameters do we need?
            - r, the current row
            - c, the current column
            - dungeon, the input matrix
            - m, the number of rows
            - n, the number of columns
        - What is the base case?
            - If (r, c) is equal to (m, n - 1) OR (m - 1, n)
                - return 1
            - If (r, c) is out of bound
                - Return 'Integer.MAX_VALUE'
        - In each of the recursive call
            - Recursively find the minimum health 'h1' of moving rightward
                - c => c + 1
            - Recursively find the minimum health 'h2' of moving downward
                - r => r + 1
            - Find the 'health' at the current cell
                - health = min(h1, h2) - dungeon[r][c]
            - If 'health' is less than 0
                - Return 1
            - Else
                - Return 'health'
    - This approach is not efficient enough and will result in "TLE" error

What is the Time and Space Complexity?
    - Time Complexity = O(2^(m + n)), where 'm,n' are the number of rows and columns
        - O(2^(m + n)), each recursive call has up to 2 choices and
          a depth of 'm + n'
    - Space Complexity = O(m + n), where 'm,n' are the number of rows and columns
        - O(m + n), recursive call stack memory