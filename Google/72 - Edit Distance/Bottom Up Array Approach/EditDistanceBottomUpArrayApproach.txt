Question
    Given two strings word1 and word2, return the minimum number of
    operations required to convert word1 to word2.

    You have the following three operations permitted on a word:
        - Insert a character
        - Delete a character
        - Replace a character

    Constraints:
        - 0 <= word1.length, word2.length <= 500
        - word1 and word2 consist of lowercase English letters.

Thoughts Before Coding
    - In the 2D bottom up matrix approach
        - In each of the iteration
            - We are only relying on values from the row 'i' and 'i + 1'
            - This means we can represent our 2D matrix using a single array
                - In each of the row iteration
                    - We will be updating the values from the previous row iteration

Answer
    - Create an array 'minOps'
    - Iterate through the indices from 'word1.length() -> 0', denoted as 'i'
        - Create a variable 'prev' to keep track of the previous value that was located at 'i + 1' and 'j + 1'
        - Iterate through the indices from 'word2.length() -> 0', denoted as 'j'
            - If 'i' AND 'j' are out of bound
                - continue to next iteration
            - If 'i' is out of bound
                - Set 'prev' to 'minOps[j]'
                - Set 'minOps[j]' to 'word2.length() - j'
                - continue to next iteration
            - If 'j' is out of bound
                - Set 'prev' to 'minOps[j]'
                - Set 'minOps[j]' to 'word1.length() - i'
                - continue to next iteration
            - Create a variable 'cur' to 'minOps[j]'
            - If the two characters at 'i' and 'j' inside 'word1' and 'word2' are the same
                - Set 'minOps[j]' to 'prev'
            - Else
                - Set 'minOps[j]' to 'min(prev, minOps[j], minOps[j + 1]) + 1'
            - Set 'prev' to 'cur'
    - Return 'minOps[0]'

What is the Time and Space Complexity?
    - Time Complexity = O(mn), where m,n are the length of the two input strings
        - O(mn), nested for loop
    - Space Complexity = O(n), where n is the length of 'word2'
        - O(n), 'minOps' array













