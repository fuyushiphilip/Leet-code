Question
    You are given an array prices where prices[i] is the price of a
    given stock on the ith day.

    Find the maximum profit you can achieve. You may complete at most two
    transactions.

    Note: You may not engage in multiple transactions simultaneously
    (i.e., you must sell the stock before you buy again).

    Constraints:
        - 1 <= prices.length <= 10^5
        - 0 <= prices[i] <= 10^5

Thoughts Before Coding
    - We will be converting the memoization approach to a bottom up approach
        - Where do we start?
            - In the memoization approach
                - We have cached 'i, state, t' with maximum profit 'maxProfit'
            - This means we can create a 3D matrix 'maxProfit' to keep track of the maximum profit for all
              for all combinations of 'i, state, t'
    - What are the default values inside the 'maxProfit' matrix?
        - When 'i' is out of bound OR 't' is equal 0
            - The maximum profit will be equal to 0

Answer
    - Create a 3D matrix 'maxProfit' to keep track of the maximum profit for all
      for all combinations of 'i, state, t'
        - The 'x-axis' represents 'i'
        - The 'y-axis' represents 'state'
        - The 'z-axis' represents 't'
    - Iterate through the indices from 'prices.length - 1 -> 0', denoted as 'i'
        - Iterate through the states from '1 -> 0', denoted as 'state'
            - Iterate through the transactions from '1 -> 2', denoted as 't'
                - If 'state' is equal to 0 (buy state)
                    - Set 'maxProfit[i][state][t]' to the larger value between
                        - maxProfit[i + 1][1][t] - prices[i]
                        - maxProfit[i + 1][state][t]
                - Else (sell state)
                    - Set 'maxProfit[i][state][t]' to the larger value between
                        - maxProfit[i + 1][0][t - 1] + prices[i]
                        - maxProfit[i + 1][state][t]
    - Return 'maxProfit[0][0][2]'

What is the Time and Space Complexity?
    - Time Complexity = O(n * 4) = O(n), where 'n' is the length of the input array
        - O(n * 4), nested 'for' loop
    - Space Complexity =  O(n * 2 * 3) = O(n), where 'n' is the length of the input array
        - O(n * 2 * 3), 'maxProfit' matrix



















