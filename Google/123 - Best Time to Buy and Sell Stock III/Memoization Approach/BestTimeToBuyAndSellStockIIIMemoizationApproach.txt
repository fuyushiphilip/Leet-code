Question
    You are given an array prices where prices[i] is the price of a
    given stock on the ith day.

    Find the maximum profit you can achieve. You may complete at most two
    transactions.

    Note: You may not engage in multiple transactions simultaneously
    (i.e., you must sell the stock before you buy again).

    Constraints:
        - 1 <= prices.length <= 10^5
        - 0 <= prices[i] <= 10^5

Thoughts Before Coding
    - The recursive approach is inefficient due to overlapping recursive calls
        - We can overlapping recursive calls using memoization
    - What do we need to cache?
        - In each of the recursive call
            - We are trying to find the maximum profit 'maxProfit' at the current
              'i, s, t'
            - This means we can cache 'i, s, t' with 'maxProfit'

Answer
    - Create a 3D matrix 'memo' to cache previously calculated results
        - The x-axis represents 'i'
        - The y-axis represents 's'
        - The z-axis represents 't'
    - Fill 'memo' with -1
        - This is to prevent the side case where we can not make any profit
          from the input array
    - Implement top down memoization approach
        - What parameters do we need?
            - i, our current index
            - s, our current state, (0 = buy, 1 = sell)
            - t, the number of transactions left (2)
            - prices, input prices array
            - memo, cache
        - What is the base case?
            - If 'i' is out of bound OR 't' is equal to 0
                - Return 0
            - If 'memo[i][s][t]' is equal to -1
                - Return 'memo[i][s][t]'
        - In each of the recursive call
            - If 's' is equal to 0
                - Recursively find the profit 'p1' if we buy the current stock
                    - i => i + 1
                    - s => 1 (sell)
                - Recursively find the profit 'p2' if we skip the current stock
                    - i => i + 1
                - Put 'max(p1 - prices[i], p2)' at 'memo[i][s][t]'
                - Return 'memo[i][s][t]'
            - Else
                - Recursively find the profit 'p1' if we sell at the current stock
                    - i => i + 1
                    - s => 0 (buy)
                    - t => t - 1
                - Recursively find the profit 'p2' if we skip the current stock
                    - i => i + 1
                - Put 'max(p1 + prices[i], p2)' at 'memo[i][s][t]'
                - Return 'memo[i][s][t]'

What is the Time and Space Complexity?
    - Time Complexity = O(n * 2 * 3) * 2 = O(n), where 'n' is the length of the input array
        - O(n * 2 * 3), fill 'memo' with -1
        - O(n * 2 * 3), there are 'n * 2 * 3' possible states with 'i, s, t'
    - Space Complexity = O(n * 2 * 3) + O(n) = O(n), where 'n' is the length of the input array
        - O(n * 2 * 3), 'memo'
        - O(n), recursive call stack memory



















