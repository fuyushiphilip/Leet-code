Question
    Given an array nums with n objects colored red, white, or blue,
    sort them in-place so that objects of the same color are adjacent,
    with the colors in the order red, white, and blue.

    We will use the integers 0, 1, and 2 to represent the color red,
    white, and blue, respectively.

    Constraints:
        - n == nums.length
        - 1 <= n <= 300
        - nums[i] is 0, 1, or 2.

    Follow up:
        - Could you solve this problem without using the library's sort function?
        - Could you come up with a one-pass algorithm using only O(1) constant space?

Thoughts Before Coding
    - The brute force approach will to sort the input array
        - This approach will cost us O(nlogn) time complexity
    - We will need to find a more optimized approach
        - We can implement a three pointer approach
            - One pointer 'i' will stay on the left side to populate 0s
            - One pointer 'j' will scan forward
            - One pointer 'k' will stay on the right side to populate 2s
        - When 'j' finds a 0
            - We want to swap the element at 'i' and 'j'
        - When 'j' finds a 1
            - We will skip the current index
        - When 'j' finds a 2
            - We want to swap the element at 'j' and 'k'

Answer
    - Create three variables
        - i, initially 0
        - j, initially 0
        - k, initially at the end of the array, nums.length - 1
    - While 'j' is less than or equal to 'k'
        - If 'nums[j]' is equal to 0
            - Swap the element at 'i' and 'j'
            - Increment both 'i' and 'j'
        - Else if 'nums[j]' is equal to 1
            - Increment 'j'
        - Else
            - Swap the element at 'j' and 'k'
            - decrement 'k'

What is the Time and Space Complexity?
    - Time Complexity = O(n), where 'n' is the length of the input array
        - O(n), visit each index once
    - Space Complexity = O(1)

























