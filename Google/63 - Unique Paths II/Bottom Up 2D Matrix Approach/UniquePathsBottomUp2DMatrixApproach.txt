Question
    A robot is located at the top-left corner of a m x n grid
    (marked 'Start' in the diagram below).

    The robot can only move either down or right at any point in time.
    The robot is trying to reach the bottom-right corner of the grid
    (marked 'Finish' in the diagram below).

    Now consider if some obstacles are added to the grids. How many
    unique paths would there be?

    An obstacle and space is marked as 1 and 0 respectively in the grid.

    Constraints:
        - m == obstacleGrid.length
        - n == obstacleGrid[i].length
        - 1 <= m, n <= 100
        - obstacleGrid[i][j] is 0 or 1.

Thoughts Before Coding
    - Lets convert the top down memoization approach to a bottom up approach
    - Where do we start?
        - in the memoization approach
            - We have cached 'r, c' with the number of unique 'paths'
            - This means we can create a 2D matrix 'paths' to keep track of the unique paths
              for all combinations of 'r, c'
    - What are the default values inside the 'paths' matrix?
        - When 'r, c' is out of bound OR contains a '1'
            - The number of paths will be equal to 0
        - When 'r, c' is at the bottom right corner
            - The number of paths will be equal to 1

Answer
    - Create a 2D matrix 'paths' to keep track of the unique paths
       for all combinations of 'r, c'
    - Iterate through from 'm - 1 => 0', denoted as 'r'
        - Iterate through from 'n - 1 => 0', denoted as 'c'
            - If 'obstacleGrid[r][c]' is equal to 1
                - continue to next iteration
            - If 'r, c' is at the bottom right corner
                - Place '1' at 'paths[r][c]'
                - continue to next iteration
            - If 'r' is not at the last row
                - Increment 'paths[r][c]' by 'paths[r + 1][c]'
            - If 'c' is not at the last column
                - Increment 'paths[r][c]' by 'paths[r][c + 1]'
    - Return 'paths[0][0]'

What is the Time and Space Complexity?
    - Time Complexity = O(mn), where m,n are the number of rows and columns
        - O(mn), nested 'for' loop
    - Space Complexity = O(mn), where m,n are the number of rows and columns
        - O(mn), 'paths' matrix


















