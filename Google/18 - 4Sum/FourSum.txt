Question
    Given an array nums of n integers and an integer target, are there
    elements a, b, c, and d in nums such that a + b + c + d = target?
    Find all unique quadruplets in the array which gives the sum of target.

    Notice that the solution set must not contain duplicate quadruplets.

    Constraints:
        - 0 <= nums.length <= 200
        - -10^9 <= nums[i] <= 10^9
        - -10^9 <= target <= 10^9

Thoughts Before Coding
    - The brute force approach will be to perform 4 nested 'for' loops
      to find all of the possible quadruplets
        - This approach will cost us O(n^4) time complexity because
          of the nested 'for' loops
    - We can implement an optimized approach by sorting the input
      array in ascending order
        - We can use a nested 'for' loop to find the first 2 elements
          inside our quadruplet
            - Then can implement a two pointer approach for the
              last 2 elements inside our quadruplet
      - This will allow us to reduce the time complexity to O(n^3)
   - The side case we have to handle is to prevent duplicate
     quadruplets
        - When we sort the input array in ascending order
            - All of the duplicates elements are grouped together
        - If our quadruplet consists of [a, b, c, d]
            - After we have accounted for a number 'x' at
              position 'i' inside our quadruplet
                - We will want to skip all future occurrences of 'x'
                  for the position 'i'

Answer
    - Sort the input array in ascending order
    - Create a list 'quadruplets' to keep track of all quadruplets
    - Iterate through the indices from '0 -> nums.length - 4', denoted as 'i'
        - If 'i' is not equal to 0 AND 'nums[i - 1]' is equal to 'nums[i]'
            - continue to next iteration
        - Iterate through the indices from 'i + 1 -> nums.length - 3', denoted as 'j'
            - If 'j' is not equal to 'i + 1' AND 'nums[j - 1]' is equal to 'nums[j]'
                - continue to next iteration
            - Create two variables
                - k, initially at 'j + 1'
                - m, initially at 'nums.length - 1'
            - While 'k' is less than 'm'
                - If 'k' is not equal to 'j + 1' AND 'nums[k - 1]' is equal to 'nums[k]'
                    - Increment 'k'
                    - continue to next iteration
                - If 'm' is not equal to 'nums.length - 1' AND 'nums[m]' is equal to 'nums[m + 1]'
                    - Decrement 'm'
                    - Continue to next iteration
                - Find the 'sum' of the four elements location at 'i, j, k, m'
                - If 'sum' is equal to 'target'
                    - Add the 4 numbers to 'quadruplets'
                    - Increment 'k'
                - Else if 'sum' is less than 'target'
                    - Increment 'k'
                - Else
                    - Decrement 'm'
    - Return 'quadruplets'

What is the Time and Space Complexity?
    - Time Complexity = O(nlogn) + O(n^3) = O(n^3), where 'n' is the length of the input array
        - O(nlogn), sorting
        - O(n^3), 2 nested 'for' loops + 2 pointer
    - Space Complexity = O(q), where 'q' is the total number of quadruplets
        - O(q), resulting list










