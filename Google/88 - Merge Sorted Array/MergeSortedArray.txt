Question
    Given two sorted integer arrays nums1 and nums2,
    merge nums2 into nums1 as one sorted array.

    The number of elements initialized in nums1 and nums2
    are m and n respectively. You may assume that nums1 has a
    size equal to m + n such that it has enough space to hold
    additional elements from nums2.

    Constraints:
        - nums1.length == m + n
        - nums2.length == n
        - 0 <= m, n <= 200
        - 1 <= m + n <= 200
        - -10^9 <= nums1[i], nums2[i] <= 10^9

Thoughts Before Coding
    - Our first initial approach can be placing elements to the front of 'nums1'
        - But, if we perform this approach
            - We may be replacing/override the elements that are already inside 'nums1'
        - Instead we should be placing elements into 'nums1' from the end of 'nums1'
    - We can implement a three pointer approach
        - One pointer 'i' will be our current location inside 'nums1', initially 'm - 1'
        - One pointer 'j' will be our current location inside 'nums2', initially 'n - 1'
        - One pointer 'k' will be the current index we are populating inside 'nums1', initially 'm + n - 1'

Answer
    - Create three variables
        - i, initially 'm - 1'
        - j, initially 'n - 1'
        - k, initially 'm + n - 1'
    - While 'i' OR 'j' are out of bound (greater than or equal to 0)
        - If 'j' is out of bound OR 'i' is not out of bound and 'nums1[i]' is greater than or equal to 'nums2[j]'
            - Set 'nums1[k]' to 'nums1[i]'
            - Decrement both 'i' and 'k'
        - Else
            - Set 'nums1[k]' to 'nums2[j]'
            - Decrement both 'i' and 'k'

What is the Time and Space Complexity?
    - Time Complexity = O(m + n), where m,n are the length of the two input array
        - O(m + n), visit each index once
    - Space Complexity = O(1)















