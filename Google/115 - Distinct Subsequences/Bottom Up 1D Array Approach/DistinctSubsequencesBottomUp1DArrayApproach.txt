Question
    Given two strings s and t, return the number of distinct
    subsequences of s which equals t.

    A string's subsequence is a new string formed from the original
    string by deleting some (can be none) of the characters without
    disturbing the remaining characters' relative positions.
    (i.e., "ACE" is a subsequence of "ABCDE" while "AEC" is not).

    It is guaranteed the answer fits on a 32-bit signed integer.

    Constraints:
        - 0 <= s.length, t.length <= 1000
        - s and t consist of English letters.

Thoughts Before Coding
    - In the 2D bottom up approach
        - In each of the iteration
            - We can see that we are only relying on values from rows 'i + 1'
            - This means we can create a single array to represent our 2D matrix
                - In each of the row iteration
                    - We will be updating the values from the previous iteration

Answer
    - Create an 'subsequences' to keep track of the number of subsequences
     - Iterate through the indices from 's.length() -> 0', denoted as 'i'
        - Create a variable 'prev' to keep track of the previous value before we replace
            - This is to keep track of the value at 'i + 1, j + 1'
        - Iterate through the indices from 't.length() -> 0', denoted as 'j'
            - If 'j' is out of bound
                - Set 'prev' to 'subsequences[j]'
                - Set 'subsequences[j]' to 1
                - continue to next iteration
            - If 'i' is out of bound
                - Set 'prev' to 'subsequences[j]'
                - Set 'subsequences[j]' to 0
                - continue to next iteration
            - Create a variable 'cur' and set it to 'subsequences[j]'
            - If the character at index 'i' inside 's' is equal to the character at index 'j'
              inside 't'
                - Increment 'subsequences[j]' by 'prev'
            - Set 'prev' to 'cur'
    - Return 'subsequences[0]'

What is the Time and Space Complexity?
    - Time Complexity = O(m * n), where 'm,n' are the length of the two input strings
        - O(m * n), nested 'for' loops
    - Space Complexity = O(n), where 'n' is the length of 't'
        - O(n), 'subsequences' array








