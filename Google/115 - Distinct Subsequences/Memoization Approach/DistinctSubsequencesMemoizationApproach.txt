Question
    Given two strings s and t, return the number of distinct
    subsequences of s which equals t.

    A string's subsequence is a new string formed from the original
    string by deleting some (can be none) of the characters without
    disturbing the remaining characters' relative positions.
    (i.e., "ACE" is a subsequence of "ABCDE" while "AEC" is not).

    It is guaranteed the answer fits on a 32-bit signed integer.

    Constraints:
        - 0 <= s.length, t.length <= 1000
        - s and t consist of English letters.

Thoughts Before Coding
    - The recursive approach is inefficient due to overlapping recursive calls
        - We can avoid overlapping recursive calls using memoization
    - What do we need to cache?
        - in each of the recursive call
            - We are trying find the number of distinct 'subsequences' at the current 'i, j'
            - This means we can cache 'i, j' with 'subsequences'

Answer
    - Create a 2D matrix 'memo' to cache previously calculated results
        - The rows represent 'i'
        - The columns represent 'j'
        - The values represent 'subsequences'
    - Fill 'memo' with -1
        - This is to prevent the side where 't' is not found in 's'
    - Implement the top down memoization approach
        - What parameters do we need?
            - s, the input string
            - t, the input string
            - i, current index inside 's'
            - j, current index inside 't'
            - memo, cache
        - What is the base case?
            - If 'j' is out of bound
                - Return 1
            - If 'i' is out of bound
                - Return 0
            - If 'memo[i][j]' is not equal to -1
                - Return 'memo[i][j]'
        - In each of the recursive call
            - Create a variable 'subsequences', initially 0
            - recursively find the number of subsequences 'x' if we move 'i' forward
                - i => i + 1
            - Increment 'subsequences' by 'x'
            - If the current two characters at 'i' and 'j' are the same
                - recursively find the number of subsequences 'y' if we move 'i' and 'j' forward
                    - i => i + 1
                    - j => j + 1
            - Increment 'subsequences' by 'y'
            - Put 'subsequences' at 'memo[i][j]'
            - Return 'memo[i][j]'

What is the Time and Space Complexity?
    - Time Complexity = O(m*n) + O(m*n) = O(m*n), where 'm,n' are the length of the two input string
        - O(m*n), filling 'memo' with -1
        - O(m*n), there are 'm*n' possible states with 'i, j'
    - Space Complexity = O(m*n) + O(m+n) = O(m*n), where 'm,n' are the length of the two input string
        - O(m*n), 'memo'
        - O(m+n), recursive call stack memory








