Question
    Given two strings s and t, return the number of distinct
    subsequences of s which equals t.

    A string's subsequence is a new string formed from the original
    string by deleting some (can be none) of the characters without
    disturbing the remaining characters' relative positions.
    (i.e., "ACE" is a subsequence of "ABCDE" while "AEC" is not).

    It is guaranteed the answer fits on a 32-bit signed integer.

    Constraints:
        - 0 <= s.length, t.length <= 1000
        - s and t consist of English letters.

Thoughts Before Coding
    - Lets convert the top down memoization approach to a bottom up approach
        - Where do we start?
            - In the memoization approach
                - We have cached 'i, j' with the number of 'subsequences'
                - This means we can create a 2D matrix 'subsequences' to keep track of the
                  number of subsequences for all combinations of 'i, j'
    - What are the default values inside the subsequences matrix?
        - When 'j' is out of bound (pointer inside 't')
            - So the number of subsequences will be equal to 1
        - When 'i' is out of bound (pointer inside 's')
            - So the number of subsequences will be equal to 0

Answer
    - Create a 2D matrix 'subsequence' to keep track of the
     number of subsequences for all combinations of 'i, j'
     - Iterate through the indices from 's.length() -> 0', denoted as 'i'
        - Iterate through the indices from 't.length() -> 0', denoted as 'j'
            - If 'j' is out of bound
                - Set 'subsequences[i][j]' to 1
                - continue to next iteration
            - If 'i' is out of bound
                - continue to next iteration
            - Increment 'subsequences[i][j]' by 'subsequences[i + 1][j]'
            - If the character at index 'i' inside 's' is equal to the character at index 'j'
              inside 't'
                - Increment 'subsequences[i][j]' by 'subsequences[i + 1][j + 1]'
    - Return 'subsequences[0][0]'

What is the Time and Space Complexity?
    - Time Complexity = O(m * n), where 'm,n' are the length of the two input strings
        - O(m * n), nested 'for' loops
    - Space Complexity = O(m * n), where 'm,n' are the length of the two input strings
        - O(m * n), 'subsequences' matrix








