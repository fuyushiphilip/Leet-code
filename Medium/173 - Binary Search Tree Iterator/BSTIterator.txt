Question
    Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):

    - BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the
      constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
    - boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
    - int next() Moves the pointer to the right, then returns the number at the pointer.

    Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will
    return the smallest element in the BST.

    You may assume that next() calls will always be valid. That is, there will be at least a next number in the
    in-order traversal when next() is called.

Thoughts Before Coding
    - Lets first go over the straight forward approach
        - we can perform a recursive inorder traversal and
          store all of the elements inside a list
        - Then we can use the list as our iterator by
          keeping track of the index of the current element
        - This approach will cost us O(n) initial time complexity
          and O(n) space complexity
            - The methods will have O(1) time complexity
    - We can reduce the space complexity to O(h) if we implement
      an iterative inorder traversal
        - we will be keep track of the current nodes inside
          a 'stack' instead

Answer
    - Create the following fields
        - stack, stack to keep track of the nodes
    - constructor(root)
        - Initialize 'stack'
        - Push 'root' and all of the nodes on the left path of
          'root' into the stack
    - next()
        - Pop a 'node' from 'stack'
        - Push 'node.right' and all of the nodes on the left
          path of 'node.right' into 'stack'
        - Return 'node.val'
    - hasNext()
        - Return true if 'stack' is not empty
            - Else, return false

What is the Time and Space Complexity?
    - BSTIterator()
        - Space Complexity = O(h), where 'h' is the height of tree
            - O(h), 'stack'
    - next()
        - Time Complexity
            - Worst Case = O(h), where 'h' is the height of tree
                - O(h), pushing left path of each node
            - Average Case = O(1)
    - hasNext()
        - Time Complexity = O(1)