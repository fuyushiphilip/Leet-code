Question
    Given an integer n, return the least number of
    perfect square numbers that sum to n.

    A perfect square is an integer that is the
    square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and
    16 are perfect squares while 3 and 11 are not.

Thoughts Before Coding
    - For each of the number 'n'
        - We can pick a positive value 'k', where 'k^2' is less than or equal to 'n'
            - Then we can continue to find the least number of perfect squares of 'n - k^2'
        - We will pick the value 'k' that will give us the minimum number of
          perfect squares

Answer
    - Lets implement our recursive approach
        - What parameters do we need?
            - n, the current value
        - What is the base case?
            - If 'n' is equal to 0
                - Return 0
        - In each of the recursive call
            - Create a variable 'minSquares', initially 'Integer.MAX_VALUE'
            - Iterate through from '1 -> k', where 'k^2' is less than or equal to 'n'
                - Find 'k^2'
                - Recursively find the minimum number of 'squares' if we pick 'k'
                    - n => n - k^2
                - Update 'minSquares' if 'squares + 1' is smaller
            - Return 'minSquares'
    - This approach is not efficient enough due to overlapping recursive calls

What is the Time and Space Complexity?
    - Time Complexity = O(sqrt(n)^n), where 'n' is the input value
        - O(sqrt(n)^n), each recursive call has up to 'sqrt(n)' choices, and the depth is
          equal to 'n'
    - Space Complexity = O(n), where 'n' is the input value
        - O(n), recursive call stack memory