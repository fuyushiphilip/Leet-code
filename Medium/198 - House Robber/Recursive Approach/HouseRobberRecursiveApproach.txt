Question
    You are a professional robber planning to rob houses along a street. Each house has a certain amount of
    money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

    Given an integer array nums representing the amount of money of each house, return the
    maximum amount of money you can rob tonight without alerting the police.

Thoughts Before Coding
    - For each of the house at index 'i'
        - We have up to 2 choices
            - We can rob the current house and move to index 'i + 2'
            - We can skip the current house and move to index 'i + 1'
        - We will pick the choice that will give us the higher
          amount of money

Answer
    - Implement the recursive approach
        - What parameters do we need?
            - i, the current index
            - nums, input array
        - What is the base case?
            - If 'i' is out of bound
                - Return 0
        - In each of the recursive call
            - Recursively find the money 'm1' if we rob the current house
                - i => i + 2
            - Recursively find the money 'm2' if we skip the current house
                - i => i + 1
            - Return 'max(m1 + nums[i], m2)'
        - This approach is not efficient enough due to overlapping
          recursive calls

What is the Time and Space Complexity?
    - Time Complexity = O(2^n), where 'n' is the length of the input array
        - O(2^n), each recursive call has 2 choices and a depth of 'n'
    - Space Complexity = O(n), where 'n' is the length of the input array
        - O(n), recursive call stack memory