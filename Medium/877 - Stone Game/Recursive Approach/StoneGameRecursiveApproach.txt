Question
    Alex and Lee play a game with piles of stones.  There are an even number of piles arranged in a row,
    and each pile has a positive integer number of stones piles[i].

    The objective of the game is to end with the most stones.  The total number of stones is
    odd, so there are no ties.

    Alex and Lee take turns, with Alex starting first.  Each turn, a player takes the entire pile of
    stones from either the beginning or the end of the row.  This continues until there are no more
    piles left, at which point the person with the most stones wins.

    Assuming Alex and Lee play optimally, return True if and only if Alex wins the game.

Thoughts Before Coding
    - We are given an array of stones
        - Each player is only allow to retrieve stones with
          either ends of the array
        - This means we can have two pointers 'i' and 'j' to indicate
          the current 2 indices that the current player can retrieve
          stones from
    - We can keep track of the current 'score' of the game
        - All of the stones 'x' that 'Alex' gain
            - We can increment 'score' by 'x'
        - All of the stones 'y' that 'Lee' gain
            - We can decrement 'score' by 'y'
        - This means 'Alex' will want 'score' to be as positive as possible
        - This means 'Lee' will want 'score' to be as negative as possible
    - If the final result 'score' is greater than 0
        - This means 'Alex' has won

Answer
    - Implement the recursive approach
        - What parameters do we need?
            - piles, the input array
            - p, the current player, initially 0
                - 0, Alex
                - 1, Lee
            - i, the current left boundary
            - j, the current right boundary
        - What is the base case?
            - If 'i' is greater than 'j'
                - Return 0
        - In each of the recursive call
            - If 'p' is equal to 0 (Alex)
                - Recursively find the score 's1' if 'Alex' pick from the left side
                    - p => 1
                    - i => i + 1
                - Recursively find the score 's2' if 'Alex' pick from the right side
                    - p => 1
                    - j => j - 1
                - Return 'max(s1 + piles[i], s2 + piles[j])'
            - Else, 'p' is equal to 1 (Lee)
                - Recursively find the score 's1' if 'Lee' pick from the left side
                    - p => 0
                    - i => i + 1
                - Recursively find the score 's2' if 'Lee' pick from the right side
                    - p => 0
                    - j => j - 1
                - Return 'min(s1 - piles[i], s2 - piles[j])'
    - Return true if the result of the recursive call is greater than 0
        - Else, return false
    - This approach is not efficient enough due to overlapping recursive calls

What is the Time and Space Complexity?
    - Time Complexity = O(2^n), where 'n' is the length of the input array
        - O(2^n), each recursive call has up to 2 choices and a depth of 'n'
    - Space Complexity = O(n), where 'n' is the length of the input array
        - O(n), recursive call stack memory
