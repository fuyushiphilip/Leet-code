Question
    You are given an integer array coins representing coins
    of different denominations and an integer amount representing
    a total amount of money.

    Return the fewest number of coins that you need to make up
    that amount. If that amount of money cannot be made up by
    any combination of the coins, return -1.

    You may assume that you have an infinite number of each
    kind of coin.

    Constraints:
        - 1 <= coins.length <= 12
        - 1 <= coins[i] <= 2^31 - 1
        - 0 <= amount <= 10^4

Thoughts Before Coding
    - For each of the 'amount'
        - We have up to 'n' choices, where 'n' is the number of coin denominators
        - If we pick a coin 'c', where 'c <= amount'
            - Then we need to find the minimum number of coins 'x' for 'amount - c'
            - Then we can increment 'x' by 1 to account for the coin 'c'
        - We will want to pick the value 'c' that will give us the minimum number
          of coins

Answer
    - Implement the recursive approach
        - What parameters do we need?
            - coins, input coins
            - amount
        - What is the base case?
            - If 'amount' is equal to 0
                - Return 0
        - In each of the recursive call
            - Create a variable 'minCoins' to keep track of the minimum number of
              coins for 'amount', initially '10000 + 1'
            - Iterate through the 'coins', denoted as 'c'
                - IF 'c' is greater than 'amount'
                    - continue to next iteration
                - Recursively find the number of coins 'x' if we pick 'c'
                    - amount => amount - c
                - Update 'minCoins' if 'x + 1' is smaller
        - Return 'minCoins'
    - If the recursive result 'minCoins' is less than or equal to '10000'
        - Return 'minCoins'
    - Else
        - Return -1
    - The recursive approach is not efficient enough due to overlapping recursive calls


What is the Time and Space Complexity?
    - Time Complexity = O(n^a), where 'n' is the length of the input array 'coins' and
      'a' is the input amount
        - O(n^a), each recursive call, we have up to 'n' choices and a depth of 'a'
    - Space Complexity = O(a), where 'a' is the input amount
        - O(a), recursive call stack memory