Question
    You are given an array prices where prices[i] is the price of a given stock on the ith day.

    Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

        - After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).

    Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Thoughts Before Coding
    - The recursive approach is inefficient due to overlapping recursive calls
        - We can avoid overlapping recursive calls using memoization
    - What do we need to cache?
        - In each of the recursive call
            - We are trying to find the maximum 'profit' at the current 'i, s'
        - This means we can cache 'i, s' with 'profit'

Answer
    - Create a 2D matrix 'memo' to cache previously calculated results
        - The rows represent 'i'
        - The columns represent 's'
        - The values represent 'profit'
    - Fill 'memo' with -1
        - We want to handle the side case where we are not able to generate
          a profit from the input array
    - Implement the top down memoization approach
        - What parameters do we need?
            - i, the current index
            - s, the current state (0 = buy, 1 = sell, 2 = cooldown)
            - prices, input array
            - memo, cache
        - What is the base case?
            - If 'i' is out of bound
                - Return 0
            - If 's' is equal to 2 (cooldown)
                - Recursively find the maximum profit 'p' if we skip the current index
                    - i => i + 1
                    - s => 0
                - Return 'p'
            - If 'memo[i][s]' is not equal to -1
                - Return 'memo[i][s]'
        - In each of the recursive call
            - If 's' is equal to 0 (buy)
                - Recursively find the profit 'p1' if we buy at the current price
                    - i => i + 1
                    - s => 1
                - Recursively find the profit 'p2' if we skip the current price
                    - i => i + 1
                - Put 'max(p1 - prices[i], p2)' at 'memo[i][s]'
                - Return 'memo[i][s]'
            - Else (s = sell)
                - Recursively find the profit 'p1' if we sell at the current price
                    - i => i + 1
                    - s => 2
                - Recursively find the profit 'p2' if we skip the current price
                    - i => i + 1
                - Put 'max(p1 + prices[i], p2)' at 'memo[i][s]'
                - Return 'memo[i][s]'

What is the Time and Space Complexity?
    - Time Complexity = O(3n) + O(3n) = O(n), where 'n' is the length of the input array
        - O(3n), fill 'memo' with -1
        - O(3n), there are '3 * n' states for 'i, s'
    - Space Complexity = O(3n) + O(n) = O(n), where 'n' is the length of the input array
        - O(3n), 'memo' matrix
        - O(n), recursive call stack memory
