Question
    You are given an array prices where prices[i] is the price of a given stock on the ith day.

    Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

        - After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).

    Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Thoughts Before Coding
    - For each of the index 'i'
        - We have three possible states (buy, sell, cooldown)
            - If we currently at the 'buy' state
                - We have two choices
                    - buy at the current price
                    - skip the current price
                - Pick the choice that will give us the higher amount of profit
            - If we currently at the 'sell' state
                - We have two choices
                    - sell at the current price
                    - skip the current price
                - Pick the choice that will give us the higher amount of profit
            - If we currently at the 'cooldown' state
                - We will need to skip the current index

Answer
    - Implement the recursive approach
        - What parameters do we need?
            - i, the current index
            - s, the current state (0 = buy, 1 = sell, 2 = cooldown)
            - prices, input array
        - What is the base case?
            - If 'i' is out of bound
                - Return 0
            - If 's' is equal to 2 (cooldown)
                - Recursively find the maximum profit 'p' if we skip the current index
                    - i => i + 1
                    - s => 0
                - Return 'p'
        - In each of the recursive call
            - If 's' is equal to 0 (buy)
                - Recursively find the profit 'p1' if we buy at the current price
                    - i => i + 1
                    - s => 1
                - Recursively find the profit 'p2' if we skip the current price
                    - i => i + 1
                - Return 'max(p1 - prices[i], p2)'
            - Else (s = sell)
                - Recursively find the profit 'p1' if we sell at the current price
                    - i => i + 1
                    - s => 2
                - Recursively find the profit 'p2' if we skip the current price
                    - i => i + 1
                - Return 'max(p1 + prices[i], p2)'
    - The recursive approach is not efficient enough due to overlapping recursive calls

What is the Time and Space Complexity?
    - Time Complexity = O(2^n), where 'n' is the length of the input array
        - O(2^n), in each of the recursive call, we have up to 2 choices and a depth of 'n'
    - Space Complexity = O(n), where 'n' is the length of the input array
        - O(n), recursive call stack memory
