Question
    You are given an array prices where prices[i] is the price of a given stock on the ith day.

    Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

        - After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).

    Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Thoughts Before Coding
    - Lets convert the top down memoization approach to a bottom up approach
        - Where do we start?
            - In the memoization approach
                - We have cached the 'i, s' with the maximum amount of 'profit'
            - This means we can create a 2D matrix 'profit' to keep track
              of the maximum profit for all combinations of 'i, s'

Answer
    - Create a 2D matrix 'profit' to keep track
    of the maximum profit for all combinations of 'i, s'
        - The rows represent 'i'
        - The columns represent 's'
        - The values represent 'profit'
    - Iterate through the indices from 'prices.length - 1 -> 0', denoted as 'i'
        - Iterate through the indices from '2 -> 0', denoted as 's'
            - If 's' is equal to 2 (cooldown)
                - Set 'profit[i][s]' to 'profit[i + 1][0]'
            - else if 's' is equal to '0' (buy)
                - Set 'profit[i][s]' to the larger value between
                    - 'profit[i + 1][1] - prices[i]', buying the current stock
                    - 'profit[i + 1][s]', skipping the current stock
            - Else (sell)
                - Set 'profit[i][s]' to the larger value between
                    - 'profit[i + 1][2] + prices[i]', selling the current stock
                    - 'profit[i + 1][s]', skipping the current stock
    - Return 'profit[0][0]', which is the maximum profit if we start at index 0
      with the 'buy' state

What is the Time and Space Complexity?
    - Time Complexity = O(3n) = O(n), where 'n' is the length of the input array
        - O(3n), nested 'for' loops
    - Space Complexity = O(3n) = O(n), where 'n' is the length of the input array
         - O(3n), 'profit' matrix
